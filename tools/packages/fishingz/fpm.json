{"name":"fishingz","repository":"https://github.com/nekochango/fishingz","description":"Friendly interactive shell (Fish) Plugin.","tags":[],"author":"nekochango","image":"https://user-images.githubusercontent.com/39640214/41501398-9ff0be4e-71de-11e8-8720-41733d6c0f7e.gif","stars":0,"forks":0,"issues":4,"updated":1530371861,"latest_version":null,"versions":[],"license":"","dependencies":null,"readme":"# \u003cimg src=\"http://placehold.jp/32/39aaff/000000/180x40.png?text=fishingz\"\u003e\nA plugin dedicated to fish shell for fast access to all file systems.  \nAccess is made based on path information collected in advance (hereinafter referred to as DB).\n\n　\n\n## \u003cimg src=\"http://placehold.jp/32/39aaff/444444/180x40.png?text=contents\"\u003e\n\u003cb\u003e\u003ca href=\"#-2\"\u003eFeatures\u003c/a\u003e\u003c/b\u003e\u003cbr/\u003e\n\u003cb\u003e\u003ca href=\"#-3\"\u003eDemo(1)\u003c/a\u003e\u003c/b\u003e\u003cbr/\u003e\n\u003cb\u003e\u003ca href=\"#-4\"\u003eDemo(2)\u003c/a\u003e\u003c/b\u003e\u003cbr/\u003e\n\u003cb\u003e\u003ca href=\"#-5\"\u003eDemo(3)\u003c/a\u003e\u003c/b\u003e\u003cbr/\u003e\n\u003cb\u003e\u003ca href=\"#-6\"\u003eInstall\u003c/a\u003e\u003c/b\u003e\u003cbr/\u003e\n\u003cb\u003e\u003ca href=\"#-7\"\u003eSetup\u003c/a\u003e\u003c/b\u003e\u003cbr/\u003e\n\u003cb\u003e\u003ca href=\"#-8\"\u003eAdvanced Settings\u003c/a\u003e\u003c/b\u003e\u003cbr/\u003e\n\n　\n\n## \u003cimg src=\"http://placehold.jp/24/39aaff/ffffff/180x40.png?text=Features\"\u003e\n### :whale: High-speed access using DB\n```diff\n+ Open the DB and select the target path.\n+　　- Do not identify path (find command execution) every access\n+ The process is automatically executed as follows depending on the type of the selected path.\n+　　- If it is \"directory\", execute cd\n+　　- If it is HTML, it opens in the web browser\n+　　- If it is Text, it will be opened with your favorite editor\n```\n\n### :whale: Acquire pass only from DB\n```diff\n+ Ctrl-k will copy the path under the cursor to the clipboard\n+ After copying it returns to the command line so you can paste with Shift - Insert etc.\n+　　- The path obtained by this can be an argument such as grep, cp, mv, diff, ls\n```\n\n### :whale: Initial DB construction applied high speed correspondence\n```diff\n+ DB Collect file paths using machine specifications as much as possible only when it is first constructed.\n```\n\n### :whale: Automatic DB update after the second time\n```diff\n+ Use fishingz for a certain number of times, or automatic update is performed when a certain time has passed since immediately after DB construction\n+　　- The threshold up to DB update can be set freely\n+　　- When rebuilding the DB, it is done with the machine load reduced in the background (load change is also possible)\n+　　- Scheduler registration such as cron, at etc. is unnecessary because the update opportunity is simple\n```\n\n### :whale: File can be searched from DB by sonar command which is a subset\n```diff\n+ After DB construction, you can search files from DB using sonar command.\n+　　- The usage of the sonar command is the same as egrep (just calls egrep)\n```\n\n\n## \u003cimg src=\"http://placehold.jp/24/39aaff/ffffff/180x40.png?text=Demo(1)\"\u003e\n### Move to the /etc/apache2/sites-enabled directory\n#### :fish: 1　Open DB\n+ Open the DB by entering C-u C-u from the command line. (Key can be changed)   \n![open_a_locatedb](https://user-images.githubusercontent.com/39640214/41501398-9ff0be4e-71de-11e8-8720-41733d6c0f7e.gif)\n\n#### :fish: 2　Select a path\n+ We narrow down as \u003cb\u003e/etcapac2site\u003c/b\u003e by fzf.    \n+ Select the target \u003cb\u003e [d] /etc/apache2/sites - enabled \u003c/b\u003e.    \n+ \u003cB\u003e cd /etc/apache2/sites-enabled \u003c/b\u003e was executed with the above operation  \n![select_dir](https://user-images.githubusercontent.com/39640214/41502097-6ecb9834-71ed-11e8-804e-0cdfd8f8f102.gif)\n\n　\n\n## \u003cimg src=\"http://placehold.jp/24/39aaff/ffffff/180x40.png?text=Demo(2)\"\u003e\n### Open /home/neko/.local/share/fish/generate_completions/fzf-tmux.fish with nvim-qt\n#### :fish: 1　Open DB for file\n+ Open the file DB by entering C-u C-f from the command line. (Key can be changed)\n\n#### :fish: 2　Select a path\n+ Filter by fzf as fishfzf.fish.\n+ Select the target \u003cb\u003e /home/neko/.local/share/fish/generate_completions/fzf-tmux.fish \u003c/b\u003e.  \n![demo_f](https://user-images.githubusercontent.com/39640214/41606895-b448e1da-741f-11e8-9388-0b3b85ba016d.gif)\n\n　\n\n## \u003cimg src=\"http://placehold.jp/24/39aaff/ffffff/180x40.png?text=Demo(3)\"\u003e\n### Copy only path information from DB with Ctrl-k\n#### :fish: 1　Open DB for file\n+ Open Directory for DB by entering C-u C-i from the command line. (Key can be changed) \n\n#### :fish: 2　Select a path\n+ Move the cursor to /etc/systemd\n+ Press Ctrl-k to copy /etc/systemd to clipboard (key can be changed)\n+ Paste to the console with Shift-Insert\n![ctrlk](https://user-images.githubusercontent.com/39640214/41803236-c112332c-76c1-11e8-920a-c986c656e75a.gif)\n\n\n　\n\n\n## \u003cimg src=\"http://placehold.jp/24/39aaff/ffffff/180x40.png?text=Install\"\u003e\n\n### :tropical_fish:　　Required Software\n```diff\n+ 　　　fish (Over ver2.7)\n+ 　　　fzf  \n+ 　　　xclip Or xsel\n```  \n\n### :tropical_fish:　　1.　Install fishingz\n\u003cb\u003eby GitHub\u003c/b\u003e\n```console  \ngit clone https://github.com/nekochango/fishingz  \ncp -p ./fishingz/fishingz.fish $HOME/.config/fish/function/.  \n```\n```console\nsource $HOME/.config/fish/functions/fishingz.fish\n```\n\n### :tropical_fish:　　2.　Install fzf\n- [fzf　:mag:](https://github.com/junegunn/fzf#using-git)\n```console\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n```\n\n### :tropical_fish:　　3.　Install xclip\n- [xclip　:mag:](https://github.com/astrand/xclip)  \n\nIf there is no administrator authority, compile and create xclip.\n```console\ngit clone https://github.com/astrand/xclip\nautoreconf\t\t# create configuration files\n./configure\t\t# create the Makefile\nmake\t\t\t# build the binary\n```\n\nIf you have administrator privileges, install with \napt-get install \u003c/b\u003e. \n```console\napt-get install -y xclip\n```\n\n　\n\n## \u003cimg src=\"http://placehold.jp/24/39aaff/ffffff/180x40.png?text=Setup\"\u003e\n\n\n### :tropical_fish:　　1.　Make key binding to call fishingz\n\n|Key|Corresponding command|processing Contents|\n|---|---|:--|\n|C-u C-u|fishingz|Use a DB containing \"directory\", \"file\", \"symbolic link\", \"history\" all.|\n|C-u C-i|fishingz --find-dir|Use a DB containing only \"directory\".|\n|C-u C-f|fishingz --find-file|Use a DB containing only \"file\".|\n|C-u C-l|fishingz --find-link|Use a DB containing only \"symbolic link file\".|\n|C-u C-m|fishingz --find-mru|Use a DB containing only \"history\".|\n\n　\n\nWhen setting the above table, please describe as follows. \n　\n\n***$HOME/.config/fish/functions/fish_user_key_bindings.fish***  \n```diff\n  function fish_user_key_bindings  \n    ### fishingz ###  \n+   bind \\cu\\cu 'fishingz             ; commandline -f repaint'\n+   bind \\cu\\ci 'fishingz --find-dir  ; commandline -f repaint'\n+   bind \\cu\\cf 'fishingz --find-file ; commandline -f repaint'\n+   bind \\cu\\cl 'fishingz --find-link ; commandline -f repaint'\n+   bind \\cu\\cm 'fishingz --find-mru  ; commandline -f repaint'\n\n    fzf_key_bindings\n    ### fzf ###\n    if test \"$FZF_LEGACY_KEYBINDINGS\" -eq 1\n        bind \\ct '__fzf_find_file'\n        bind \\cr '__fzf_reverse_isearch'\n        bind \\ec '__fzf_cd'\n        bind \\eC '__fzf_cd --hidden'\n(-- snip --)\n```\n\n　\n\n### :tropical_fish:　　2.　Build a DB\n```console\nfishingz -i\n```\nIn the initial setting, the following file system is excluded from searching.\n```\n/lost+found 　/snap 　/proc 　/sbin 　/media 　/root 　/opt\n/srv 　/cdrom 　/lib64 　/mnt 　/run 　/tmp 　/lib 　/dev\n```\n\n　\n\n### :tropical_fish:　　3.　Register the application for each file type  \nRegister the application you want to use for each file type.  \nThe file type corresponds to the result of \"file-b-i\".\nIt is also executed from the corresponding application.\n\n　\n\n***$HOME/.fishingz/init.fish***  \n```\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# Command to execute in case of [f]\n# file-type : command : use sudo when readonly file : redirect : background \n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nset -g  FISHINGZ_F_ACTIONS  '\n  \"text/html\"       : \"setsid google-chrome\" : \"\"     : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"application/xml\" : \"setsid google-chrome\" : \"\"     : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"text/html\"       : \"setsid google-chrome\" : \"sudo\" : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"text/xml\"        : \"setsid google-chrome\" : \"sudo\" : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"text\"            : \"nvim\"                 : \"sudo\" : \"\"                        : \"\"   \n  \"image\"           : \"setsid xdg-open\"      : \"\"     : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"inode/x-empty\"   : \"nvim\"                 : \"\"     : \"\"                        : \"\"\n'\n```\n\n　\n\n\u003cb\u003e**With this you can use fishingz.**\u003c/b\u003e\n\n　\n\n## \u003cimg src=\"http://placehold.jp/24/39aaff/ffffff/280x40.png?text=Advanced%20Settings\"\u003e\n\n\nThe following can be done as necessary.\n　 \n\n### :dolphin:　　1.　Set up fishingz\n\nThe configuration file is $ HOME/.fishingz/init.fish.\n\n|Variable name|Processing content|Default value|\n|---|:--|:--|\n|FISHINGZ_F_ACTIONS|Define the application you want to use according to the file type||\n|FISHINGZ_DB_REBLD_THLD_C|Number of times fishingz used to rebuild DB|50|\n|FISHINGZ_DB_REBLD_THLD_T|Elapsed time to DB reconfiguration (sec)|86400(sec)=1day|\n|FISHINGZ_NPROC_ON_REBUILD|Number of CPUs used for DB reconstruction|1|\n|FISHINGZ_HISTMAX|Number of MRUs to keep|1000|\n|FISHINGZ_COLOR_D|Display color of directory when opening DB|32m (green)|\n|FISHINGZ_COLOR_F|Display color of file when opening DB|36m (cyan)|\n|FISHINGZ_COLOR_L|Symbolic link display color when opening DB|35m (purple)|\n|FISHINGZ_COLOR_M|MRU display color when opening DB|33m (yellow)|\n|FISHINGZ_FZF_COLOR|Color setting in fzf mode||\n|FISHINGZ_HISTMAX|Key setting for single line copy processing in fzf mode||\n|FISHINGZ_EXCLUDE_FS|File system you want to exclude from DB|/lost+found, /snap, /proc, /sbin, ...|\n|FISHINGZ_EXCLUDE_DIR|Directory you want to exclude from DB|.git, .svn, CVS|\n　\n\nWhen setting the above table, please describe as follows.\n　\n\n***$HOME/.fishingz/init.fish***  \n```\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# Command to execute in case of [f]\n# file-type : command : use sudo when readonly file : redirect : background \n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nset -g  FISHINGZ_F_ACTIONS  '\n  \"text/html\"       : \"setsid google-chrome\" : \"\"     : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"application/xml\" : \"setsid google-chrome\" : \"\"     : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"text/html\"       : \"setsid google-chrome\" : \"sudo\" : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"text/xml\"        : \"setsid google-chrome\" : \"sudo\" : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"text\"            : \"nvim\"                 : \"sudo\" : \"\"                        : \"\"   \n  \"image\"           : \"setsid xdg-open\"      : \"\"     : \"1\u003e/dev/null 2\u003e/dev/null\" : \"\u0026\"  \n  \"inode/x-empty\"   : \"nvim\"                 : \"\"     : \"\"                        : \"\"\n'\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# No searchable top directories, when creating database\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nset -g  FISHINGZ_EXCLUDE_FS   \"/mnt\"  \"/srv\"  \"/lib\"  \"/lib64\"  \n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# No searchable directories, when creating database\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nset -g FISHINGZ_EXCLUDE_DIR  \".mozilla\"  \".cache\"\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# It represents how many times fishingz is updated when it is updated\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nset -g  FISHINGZ_DB_REBLD_THLD_C  50      # 50 reps\nset -g  FISHINGZ_DB_REBLD_THLD_T  86400   # 1day=3600(sec)*24\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# the number of lines or commands that (a) are allowed in the history file \n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nset -g  FISHINGZ_HISTMAX          10000\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# Number of Core to use when re-building DB\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nset -g FISHINGZ_NPROC_ON_REBUILD  1\n\n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n# fzf color settings.\n# 30:black, 31:red, 32:green, 33:yellow, 34:blue, 35:magenta, 36:cyan, 37:white \n#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nset -g  FISHINGZ_COLOR_D  32m       # [d] directory\nset -g  FISHINGZ_COLOR_F  36m       # [f] file\nset -g  FISHINGZ_COLOR_L  35m       # [l] symlink\nset -g  FISHINGZ_COLOR_M  33m       # [M] MRU\nset -g  FISHINGZ_FZF_COLOR \"--color=hl:#ff00b0,bg+:#666666\"\n```\n\n　\n","activity":null,"contributors":[{"avatar":"https://avatars.githubusercontent.com/u/39640214?v=4","name":"nekochango"}]}
