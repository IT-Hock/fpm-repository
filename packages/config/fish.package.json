{"name":"config","description":"Get and set package configuration","image":"","latest_version":{"version":"","description":"","commit_hash":"","release_date":0},"versions":[],"tags":[],"author":"oh-my-fish","repository":"https://github.com/oh-my-fish/plugin-config","license":"MIT","dependencies":[],"stars":2,"forks":1,"watchers":2,"issues":0,"updated":1576747972,"full_description":"\u003cdiv align=\"center\"\u003e\n  \u003ca href=\"http://github.com/oh-my-fish/oh-my-fish\"\u003e\n  \u003cimg width=90px  src=\"https://cloud.githubusercontent.com/assets/8317250/8510172/f006f0a4-230f-11e5-98b6-5c2e3c87088f.png\"\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\n# config\nPlugin for [Oh My Fish][omf-link].\n\nStandardized tool for loading and saving configuration variables for your plugins.\n\n\n## Setup\nTo use `config` in your plugin, first add it to your plugin's `bundle` file:\n\n    package config\n\nYou can now start using `config` in your plugin.\n\n\n## Getting and setting values\nEvery config value is grouped under a namespace. To access your plugin's settings, you need to choose a namespace to keep all of your settings in. The name of your plugin is usually a good choice.\n\nReading a config value looks like this:\n\n    config my-namespace --get my-property\n\nFor all of `config`'s actions, the namespace must always be the first argument. In the above command, the value of the `my-property` _key_ in the `my-namespace` _namespace_ will be printed to standard output.\n\nKey names can have their own hierarchy. To add additional layers of grouping, you can separate names with a dot (`.`):\n\n    config my-namespace --get misc.colors.header\n\nThe nesting isn't just a nice convention; the nesting will actually be reflected in the storage backing (more on that in a bit).\n\nSetting values is similar to getting them. We can set `misc.colors.header` to `red` as follows:\n\n    config my-namespace --set misc.colors.header red\n\nIf you need to check what all of your config values are at once, you can see a pretty list of key-value pairs with\n\n    config my-namespace --list\n\nThere are more operations than just getting and setting that you can do on your configuration. Check the output of `config --help` for a complete list of actions and options.\n\n\n## Config files\nConfig values are stored in individual files and directories in `$FISH_CONFIG`. A directory is created for each namespace to hold config files at `$FISH_CONFIG/my-namespace`. When using Oh My Fish! (the default), `$FISH_CONFIG` will be the same as `$OMF_CONFIG`. Otherwise it will be set to `$XDG_CONFIG_HOME`, or fall back to `$HOME/.config`.\n\nEach key gets its own file inside the namespace directory. For example, if you have a key called `email` in a `mailer` namespace, you can expect a file at `$FISH_CONFIG/mailer/email` to exist, which contains as text the value of that key. If a key is nested, like our `misc.colors.header` example from earlier, each level of nesting is made into a directory separator. `misc.colors.header` then would be stored in `$FISH_CONFIG/namespace/misc/colors/header`.\n\nNote that a key cannot hold both subkeys and a value.\n\n\n## Command-line config editing\nThere's a reason why the `config` command has slightly odd ordering of arguments. You can easily embed the `config` command into your own plugin with minimal effort. Let's say you develop a plugin called `fancy-echo` that prints out text prefixed with a configurable string. A good way to store this string would be in the `prefix` key under the `fancy-echo` namespace. In our plugin, we can read that property with\n\n    config fancy-echo --get prefix\n\nNow if the user wants to change this value without opening up and editing the corresponding config file, the user can use the `config` command themselves:\n\n    config fancy-echo --set prefix \"This just in: \"\n\nWe can make this easier by copying Git's `config` command syntax:\n\n```fish\nfunction fe -d \"Fancy echo\"\n  if begin; set -q argv[1]; and test \"$argv[1]\" = config; end\n    # Pass arguments on to `config`\n    config fancy-echo $argv[2..-1]\n    return\n  end\nend\n```\n\nNow we can edit `fancy-echo`'s config with `fancy-echo`'s own command!\n\n    fe config --set prefix \"This just in: \"\n\nIf the user needs some help, they can still use `fe config --help`; the help text will adapt automatically to match the package it is embedded in.\n\n\n## License\n[MIT][mit] Â© [coderstephen][author] et [al][contributors]\n\n\n[mit]:            http://opensource.org/licenses/MIT\n[author]:         http://github.com/coderstephen\n[contributors]:   https://github.com/oh-my-fish/plugin-config/graphs/contributors\n[omf-link]:       https://www.github.com/oh-my-fish/oh-my-fish\n[license-badge]:  https://img.shields.io/badge/license-MIT-007EC7.svg?style=flat-square\n"}